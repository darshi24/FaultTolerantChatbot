import java.rmi.Remote;
import java.rmi.RemoteException;
import java.util.List;

/**
 * An interface that represents the Chat Bot Server providing services to the client.
 */
public interface BotServerInterface extends Remote {

    /**
     * A method that initiates the PAXOS algorithm so that when an interaction is recorded in the chat
     * history, the replicas can record that interaction as well and keep a consistent view of all
     * interactions
     * @param timestamp the timestamp of the interaction
     * @param clientTicker the ticker entered by the client in the interaction
     * @param price the price returned by the external API during the interaction
     * @return a string value of either "success" or "failure" denoting whether the PAXOS run related to
     * the message successfully completed or not.
     * @throws RemoteException the exception that is thrown if the remote call fails
     */
    String createHistory(Long timestamp, String clientTicker, String price) throws RemoteException;

    /**
     * A method belong to the server's proposer role that proposes the client's message to the acceptors
     * at phase 1 and 2 of the PAXOS algorithm and determines whether the PAXOS run was successful or not
     * depending on the number of votes it received from the acceptors during both phases.
     * @param timestamp the timestamp of the interaction
     * @param clientTicker the ticker entered by the client in the interaction
     * @param price the price returned by the external API during the interaction
     * @return returns a string value of "success" or "failure" denoting whether the PAXOS run related to
     * the message successfully completed or not.
     * @throws RemoteException the exception that is thrown if the remote call fails
     */
    String prepareAndPropose(Long timestamp, String clientTicker, String price) throws RemoteException;

    /**
     * A method to retrieve a list of bot server instances.
     * @return a list of bot server instances
     * @throws RemoteException the exception that is thrown if the remote call fails
     */
    List<BotServerInterface> getServerList() throws RemoteException;

    /**
     * A method belonging to the server's acceptor role that receives a proposal of an ID and message
     * during phase 1 of the PAXOS algorithm and decides whether to send a promise to the proposer or not
     * @param proposalId the proposal ID generated by the server's proposer role
     * @param message the interaction of the client to be recorded in the chat history
     * @return a string value of "fail" or a concatenated string value of proposal ID and the last accepted
     * value (piggybacked value)
     * @throws RemoteException the exception that is thrown if the remote call fails
     */
    String requestPromise(Long proposalId,String message) throws RemoteException;

    /**
     * A method belonging to the server's acceptor role that receives a proposal of an ID and message
     * during phase 2 of the PAXOS algorithm and decides whether it can be acceptable or not.
     * @param proposalId the proposal ID generated by the server's proposer role
     * @param lastAcceptedProposalId the proposal ID last accepted by the server's acceptor role
     * @param message the interaction of the client to be recorded in the chat history
     * @return a boolean value signifying whether the server's acceptor role accepted the proposal or not
     * @throws RemoteException the exception that is thrown if the remote call fails
     */
    boolean proposal(Long proposalId, Long lastAcceptedProposalId,String message) throws RemoteException;

    /**
     * A method for the server's listener role which does the actual update to the key value store.
     * @param message the interaction of the client to be recorded in the chat history
     * @throws RemoteException the exception that is thrown if the remote call fails
     */
    void accept(String message) throws RemoteException;


}
